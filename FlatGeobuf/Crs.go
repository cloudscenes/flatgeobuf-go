// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FlatGeobuf

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CrsT struct {
	Org string
	Code int32
	Name string
	Description string
	Wkt string
	CodeString string
}

func (t *CrsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	orgOffset := builder.CreateString(t.Org)
	nameOffset := builder.CreateString(t.Name)
	descriptionOffset := builder.CreateString(t.Description)
	wktOffset := builder.CreateString(t.Wkt)
	codeStringOffset := builder.CreateString(t.CodeString)
	CrsStart(builder)
	CrsAddOrg(builder, orgOffset)
	CrsAddCode(builder, t.Code)
	CrsAddName(builder, nameOffset)
	CrsAddDescription(builder, descriptionOffset)
	CrsAddWkt(builder, wktOffset)
	CrsAddCodeString(builder, codeStringOffset)
	return CrsEnd(builder)
}

func (rcv *Crs) UnPackTo(t *CrsT) {
	t.Org = string(rcv.Org())
	t.Code = rcv.Code()
	t.Name = string(rcv.Name())
	t.Description = string(rcv.Description())
	t.Wkt = string(rcv.Wkt())
	t.CodeString = string(rcv.CodeString())
}

func (rcv *Crs) UnPack() *CrsT {
	if rcv == nil { return nil }
	t := &CrsT{}
	rcv.UnPackTo(t)
	return t
}

type Crs struct {
	_tab flatbuffers.Table
}

func GetRootAsCrs(buf []byte, offset flatbuffers.UOffsetT) *Crs {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Crs{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Crs) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Crs) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Crs) Org() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Crs) Code() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Crs) MutateCode(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *Crs) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Crs) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Crs) Wkt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Crs) CodeString() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func CrsStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func CrsAddOrg(builder *flatbuffers.Builder, org flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(org), 0)
}
func CrsAddCode(builder *flatbuffers.Builder, code int32) {
	builder.PrependInt32Slot(1, code, 0)
}
func CrsAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(name), 0)
}
func CrsAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(description), 0)
}
func CrsAddWkt(builder *flatbuffers.Builder, wkt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(wkt), 0)
}
func CrsAddCodeString(builder *flatbuffers.Builder, codeString flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(codeString), 0)
}
func CrsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
