// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FlatGeobuf

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FeatureT struct {
	Geometry *GeometryT
	Properties []byte
	Columns []*ColumnT
}

func (t *FeatureT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	geometryOffset := t.Geometry.Pack(builder)
	propertiesOffset := flatbuffers.UOffsetT(0)
	if t.Properties != nil {
		propertiesOffset = builder.CreateByteString(t.Properties)
	}
	columnsOffset := flatbuffers.UOffsetT(0)
	if t.Columns != nil {
		columnsLength := len(t.Columns)
		columnsOffsets := make([]flatbuffers.UOffsetT, columnsLength)
		for j := 0; j < columnsLength; j++ {
			columnsOffsets[j] = t.Columns[j].Pack(builder)
		}
		FeatureStartColumnsVector(builder, columnsLength)
		for j := columnsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(columnsOffsets[j])
		}
		columnsOffset = builder.EndVector(columnsLength)
	}
	FeatureStart(builder)
	FeatureAddGeometry(builder, geometryOffset)
	FeatureAddProperties(builder, propertiesOffset)
	FeatureAddColumns(builder, columnsOffset)
	return FeatureEnd(builder)
}

func (rcv *Feature) UnPackTo(t *FeatureT) {
	t.Geometry = rcv.Geometry(nil).UnPack()
	t.Properties = rcv.PropertiesBytes()
	columnsLength := rcv.ColumnsLength()
	t.Columns = make([]*ColumnT, columnsLength)
	for j := 0; j < columnsLength; j++ {
		x := Column{}
		rcv.Columns(&x, j)
		t.Columns[j] = x.UnPack()
	}
}

func (rcv *Feature) UnPack() *FeatureT {
	if rcv == nil { return nil }
	t := &FeatureT{}
	rcv.UnPackTo(t)
	return t
}

type Feature struct {
	_tab flatbuffers.Table
}

func GetRootAsFeature(buf []byte, offset flatbuffers.UOffsetT) *Feature {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Feature{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Feature) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Feature) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Feature) Geometry(obj *Geometry) *Geometry {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Geometry)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Feature) Properties(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Feature) PropertiesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Feature) PropertiesBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Feature) MutateProperties(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *Feature) Columns(obj *Column, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Feature) ColumnsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func FeatureStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func FeatureAddGeometry(builder *flatbuffers.Builder, geometry flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(geometry), 0)
}
func FeatureAddProperties(builder *flatbuffers.Builder, properties flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(properties), 0)
}
func FeatureStartPropertiesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func FeatureAddColumns(builder *flatbuffers.Builder, columns flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(columns), 0)
}
func FeatureStartColumnsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FeatureEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
